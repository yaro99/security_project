<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let publicKeyReady = false;
    let receiverUsername = '';
    let publicKey, privateKey, receiverPublicKey;

    

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case

        const autoChatWith = Cookies.get('auto_chat_with');
        if (autoChatWith) {
            // Set the receiver's username and call join_room automatically
            $('#receiver').val(autoChatWith);
            join_room();

            // Clear the cookie so it doesn't auto-join next time the page loads
            Cookies.remove('auto_chat_with');
        }
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    // ATTN WANT TO GET RID OF THIS
    Cookies.set('username', username);

    async function sendPublicKeyToServer(publicKey) {
            // Export the public key to a usable format
            const exportedKey = await window.crypto.subtle.exportKey(
                "spki", // Use "spki" for public keys
                publicKey
            );

            // Convert the exported key to Base64 to send it as a string
            const keyInBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedKey)));

            // Use axios to send the public key to the server
            try {
                const response = await axios.post('/api/send_public_key', {
                    publicKey: keyInBase64
                });

                if (response.data.success) {
                    console.log('Public key sent successfully');
                } else {
                    console.error('Failed to send public key', response.data.error);
                }
            } catch (error) {
                console.error('Error sending public key', error);
            }
        }


    document.addEventListener('DOMContentLoaded', async () => {
        try {
            const privateKeyStorageKey = username + "_privateKey";
            const publicKeyStorageKey = username + "_publicKey";

            let privateKeyBase64 = localStorage.getItem(privateKeyStorageKey);
            let publicKeyBase64 = localStorage.getItem(publicKeyStorageKey);

            if (privateKeyBase64 && publicKeyBase64) {
                const privateKeyArrayBuffer = base64ToArrayBuffer(privateKeyBase64);
                const publicKeyArrayBuffer = base64ToArrayBuffer(publicKeyBase64);

                privateKey = await window.crypto.subtle.importKey(
                    "pkcs8",
                    privateKeyArrayBuffer,
                    { name: "RSA-OAEP", hash: "SHA-256" },
                    true,
                    ["decrypt"]
                );

                publicKey = await window.crypto.subtle.importKey(
                    "spki",
                    publicKeyArrayBuffer,
                    { name: "RSA-OAEP", hash: "SHA-256" },
                    true,
                    ["encrypt"]
                );
            } else {
                const keyPair = await window.crypto.subtle.generateKey(
                    {
                        name: "RSA-OAEP",
                        modulusLength: 2048,
                        publicExponent: new Uint8Array([1, 0, 1]),
                        hash: "SHA-256"
                    },
                    true, // whether the key is extractable (i.e. can be used in exportKey)
                    ["encrypt", "decrypt"] // must be ["encrypt", "decrypt"], or an equivalent array
                );

                publicKey = keyPair.publicKey;
                privateKey = keyPair.privateKey;

                const exportedPrivateKey = await window.crypto.subtle.exportKey("pkcs8", privateKey);
                const exportedPublicKey = await window.crypto.subtle.exportKey("spki", publicKey);

                privateKeyBase64 = arrayBufferToBase64(exportedPrivateKey);
                publicKeyBase64 = arrayBufferToBase64(exportedPublicKey);

                localStorage.setItem(privateKeyStorageKey, privateKeyBase64);
                localStorage.setItem(publicKeyStorageKey, publicKeyBase64);

                await sendPublicKeyToServer(publicKey);
            }

            console.log("Public Key type:", publicKey.constructor.name); // Should be "CryptoKey"
            console.log("Private Key type:", privateKey.constructor.name); // Should be "CryptoKey"
            publicKeyReady = true;
        } catch (err) {
            console.error("Key generation error:", err);
        }
    });

    async function encryptMessage(message, publicKey) {
        try{
        let enc = new TextEncoder();
        let encodedMessage = enc.encode(message);
        let encryptedMessage = await window.crypto.subtle.encrypt(
            { name: "RSA-OAEP" },
            publicKey,
            encodedMessage
        );
        return new Uint8Array(encryptedMessage);
        }
        catch (error) {
            console.error("Encryption error:", error);
        }
    }

    async function decryptMessage(encryptedMessage, privateKey) {
        try{
        let decryptedMessage = await window.crypto.subtle.decrypt(
            { name: "RSA-OAEP" },
            privateKey,
            encryptedMessage
        );
        let dec = new TextDecoder();
        return dec.decode(decryptedMessage);
        } catch (error) {
            console.error("Decryption error:", error);
        }
    }

    
    // initializes the socket
    const socket = io();

    async function initializeConnection() {
        let connection = username + " has connected.";
        console.log("before");
        if (!publicKey) {
            console.error("Public key is not ready!");
            return;
        }
        console.log("Public Key type:", publicKey.constructor.name); // Should be "CryptoKey"
        const enctext_connection = await encryptMessage(connection, publicKey);
        console.log("after");
        socket.emit("do_connection", enctext_connection);
    }


    function base64ToArrayBuffer(base64) {
        const binaryString = window.atob(base64); // Decode base64 to string
        const len = binaryString.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return bytes.buffer; // Convert Uint8Array to ArrayBuffer
    }

    function arrayBufferToBase64(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
    }

    socket.on("incoming", async (msg, color="black") => {
        try {
            // Message is encrypted, decrypt it
            //const arrayBuffer = base64ToArrayBuffer(msg);
            const decryptedMessage = await decryptMessage(msg, privateKey);
            add_message(decryptedMessage, color);  // Use the decrypted message here
        } catch (error) {
            console.error("Error handling incoming message:", error);
        }
    });



    
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let message = username + ": " + $("#message").val();
        const message_sender_encrypted = await encryptMessage(message, publicKey);
        const message_receiver_encrypted = await encryptMessage(message, receiverPublicKey);
        console.log("receiver user name just before sending: " + receiverUsername);
        socket.emit("send", username, receiverUsername, message_sender_encrypted, message_receiver_encrypted, room_id);


        //signature: def send(sender_username, receiver_username, message_sender_encrypted, message_receiver_encrypted, room_id):
    } 

    // we emit a join room event to the server to join a room
    async function join_room() {
       
        let receiver = $("#receiver").val();
        receiverUsername = receiver;
        console.log("receiver user name " + receiverUsername);
        let receiverPublicKeyData = localStorage.getItem(receiver + "_publicKey");

        if (!receiverPublicKeyData) {
            // No public key in localStorage, retrieve from the server
            try {
                const response = await axios.get('/api/get_public_key', { params: { username: receiver } });
                if (response.data && response.data.publicKey) {
                    // Save the retrieved public key in localStorage
                    localStorage.setItem(receiver + "_publicKey", response.data.publicKey);
                    receiverPublicKeyData = response.data.publicKey;
                } else {
                    alert("Could not retrieve public key for user: " + receiver);
                    return;
                }
            } catch (error) {
                console.error('Error retrieving public key', error);
                alert("Error retrieving public key for user: " + receiver);
                return;
            }
        }

        // Convert Base64 string to ArrayBuffer
        if (receiverPublicKeyData) {
            const arrayBuffer = base64ToArrayBuffer(receiverPublicKeyData);
            try {
                // Import the public key to use it for encryption
                receiverPublicKey = await window.crypto.subtle.importKey(
                    "spki",
                    arrayBuffer,
                    {
                        name: "RSA-OAEP",
                        hash: {name: "SHA-256"}
                    },
                    true,
                    ["encrypt"]
                );
            } catch (e) {
                console.error("Error importing key: ", e);
                alert("Failed to import public key");
                return;
            }
    }

        // pass in the receiver of our message to the server
        // as well as the current user's username
        let message2 = username + " has joined the room.";
        const enctext_join = await encryptMessage(message2, publicKey);

        let message3 = username + " has joined the room. Now talking to " + receiver;
        const enctext_join_talkingto = await encryptMessage(message3, publicKey);
        console.log("enctext: " + enctext_join_talkingto);

        socket.emit("join", username, receiver, enctext_join, enctext_join_talkingto, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    async function leave() {
        let message4 = username + " has left the room.";
        const enctext_leave = await encryptMessage(message4, publicKey);
        Cookies.remove("room_id");
        
        socket.emit("leave", username, enctext_leave, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    
</script>
{% endblock %}
