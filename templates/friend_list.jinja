{% extends 'base.jinja' %}

{% block content %}


<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>
    <h1>Friend List</h1>

        <!-- vardaan's code - implemented click to chat starts here -->
    <section>
        <h2>Current Friends</h2>
        <ul>
            {% for friend in accepted_friends %}
            <li><a href="#" onclick="openChatRoom('{{ friend.username }}')">{{ friend.username }}</a></li>
            {% endfor %}
        </ul>
    </section>
    <!-- vardaan's code - implemented click to chat ends here -->

    <section>
        <h2>Friend Request Inbox</h2>
        <ul>
            {% for request in pending_requests %}
                <li>
                    {{ request.username }}
                    <button onclick="handleFriendRequest('{{ username }}', '{{ request.username }}', true)">Approve</button>
                    <button onclick="handleFriendRequest('{{ username }}', '{{ request.username }}', false)">Reject</button>
                </li>
            {% endfor %}
        </ul>
    </section>

    <section>
        <h2>Pending Friend Requests Awaiting Response...</h2>
        <ul>
            {% for pending in pending_friends %}
                <li>{{ pending.username }}</li>
            {% endfor %}
        </ul>
    </section>

    <script>
        let publicKeyReady = false;
        let publicKey, privateKey, receiverPublicKey;
        let username = "{{ username }}";


        document.addEventListener('DOMContentLoaded', async () => {
        try {
            const privateKeyStorageKey = username + "_privateKey";
            const publicKeyStorageKey = username + "_publicKey";

            let privateKeyBase64 = localStorage.getItem(privateKeyStorageKey);
            let publicKeyBase64 = localStorage.getItem(publicKeyStorageKey);

            if (!(privateKeyBase64 && publicKeyBase64)) {
                
                const keyPair = await window.crypto.subtle.generateKey(
                    {
                        name: "RSA-OAEP",
                        modulusLength: 2048,
                        publicExponent: new Uint8Array([1, 0, 1]),
                        hash: "SHA-256"
                    },
                    true, // whether the key is extractable (i.e. can be used in exportKey)
                    ["encrypt", "decrypt"] // must be ["encrypt", "decrypt"], or an equivalent array
                );

                publicKey = keyPair.publicKey;
                privateKey = keyPair.privateKey;

                const exportedPrivateKey = await window.crypto.subtle.exportKey("pkcs8", privateKey);
                const exportedPublicKey = await window.crypto.subtle.exportKey("spki", publicKey);

                privateKeyBase64 = arrayBufferToBase64(exportedPrivateKey);
                publicKeyBase64 = arrayBufferToBase64(exportedPublicKey);

                localStorage.setItem(privateKeyStorageKey, privateKeyBase64);
                localStorage.setItem(publicKeyStorageKey, publicKeyBase64);

                await sendPublicKeyToServer(publicKey);
            }

            console.log("Public Key type:", publicKey.constructor.name); // Should be "CryptoKey"
            console.log("Private Key type:", privateKey.constructor.name); // Should be "CryptoKey"


        } catch (err) {
            console.error("Key generation error:", err);
        }
    });

    async function sendPublicKeyToServer(publicKey) {
            // Export the public key to a usable format
            const exportedKey = await window.crypto.subtle.exportKey(
                "spki", // Use "spki" for public keys
                publicKey
            );

            // Convert the exported key to Base64 to send it as a string
            const keyInBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedKey)));

            // Use axios to send the public key to the server
            try {
                const response = await axios.post('/api/send_public_key', {
                    publicKey: keyInBase64
                });

                if (response.data.success) {
                    console.log('Public key sent successfully');
                } else {
                    console.error('Failed to send public key', response.data.error);
                }
            } catch (error) {
                console.error('Error sending public key', error);
            }
        }

        function base64ToArrayBuffer(base64) {
            const binaryString = window.atob(base64); // Decode base64 to string
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer; // Convert Uint8Array to ArrayBuffer
        }

        function arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        async function handleFriendRequest(loggedInUsername, friendUsername, isAccepted) {
            let actionURL = "{{ url_for('handle_friend_request') }}";
            try {
                let res = await axios.post(actionURL, JSON.stringify({
                    username: loggedInUsername,
                    friend_username: friendUsername,
                    is_accepted: isAccepted
                }), {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (res.data === 'Success') {
                    location.reload();  // Reload the page to update the list
                } else {
                    alert('Error handling the friend request.');
                }
            } catch (error) {
                console.error('Failed to process the friend request:', error);
                alert('Failed to process the friend request.');
            }
        }
    </script>

    <section>
        <h2>Add a New Friend</h2>
        <form id="addFriendForm">
            <input type="text" id="newFriendUsername" placeholder="Enter friend's username" required>
            <button type="button" onclick="addFriend()">Add</button>
        </form>
    </section>

    <script>
        async function addFriend() {
            let username = "{{ username }}";  // Assuming you pass the current user's username as a variable to the template
            let friendUsername = document.getElementById('newFriendUsername').value;
            if(friendUsername) {
                let addURL = "{{ url_for('add_friend') }}";
                try {
                    let res = await axios.post(addURL, JSON.stringify({
                        username: username,
                        friend_username: friendUsername
                    }), {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    if (res.data === 'Success') {
                        location.reload();  // Reload the page to show the updated friend list
                    } else {
                        alert(res.data.error);  // Correctly display error messages
                    }
                } catch (error) {
                    console.error('Failed to send the friend request:', error);
                    alert('Failed to send the friend request: ' + (error.response.data.error || error.message));
                }
            }
        }
    </script>

    <!--// vardaan's code - implemented click to chat starts here-->
    <script>
        async function openChatRoom(friendUsername) {
            try {
                // Set a cookie with the friend's username
                Cookies.set('auto_chat_with', friendUsername);

                // Redirect to the home page, which now knows who to automatically start chatting with
                window.location.href = "{{ url_for('home') }}";
            } catch (error) {
                console.error('Error opening chat room:', error);
                alert('Error opening chat room. Please try again.');
            }
        }


    </script>
    <!-- vardaan's code - implemented click to chat starts here -->

{% endblock %}
